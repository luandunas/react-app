{"version":3,"sources":["componentes/Modal.tsx","componentes/Lista.tsx","index.js"],"names":["cards","card_number","cvv","expiry_date","Modal","state","card_index","e","test","key","preventDefault","currentTarget","value","valor","toString","replace","length","id","valueToPay","headerTitle","document","getElementById","payload","destination_user_id","fetch","method","headers","body","JSON","stringify","then","response","json","data","textContent","success","getElementsByClassName","innerHTML","catch","err","this","props","show","className","onClick","onClose","stopPropagation","placeholder","type","onKeyPress","event","formatCurrency","name","map","card","index","slice","finalValue","getElementsByTagName","Number","substring","selectElement","options","selectedIndex","getAttribute","payUser","user_id","focus","createModal","Component","api","Lista","users","modalUsername","componentDidMount","a","obj","setState","user","src","img","alt","username","createLi","ReactDOM","render"],"mappings":"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","file":"static/js/main.e6b80082.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport '../css/modal.css';\r\n\r\n//Definindo interface para os props que a classe vai receber.\r\ninterface props {\r\n    'data-name'?: string;\r\n    user_id: number;\r\n    show: boolean;\r\n    onClose: Function,\r\n}\r\n\r\n// Definindo interface para o Payload que vai ser passado no POST para a API\r\ninterface TransactionPayload {\r\n    // Card Info\r\n    card_number: string;\r\n    cvv: number;\r\n    expiry_date: string;\r\n\r\n    // Destination User ID\r\n    destination_user_id: number;\r\n\r\n    // Value of the Transaction\r\n    value: number;\r\n}\r\n\r\n//cartões para exibir como pagamento.\r\nlet cards = [\r\n    // valid card\r\n    {\r\n        card_number: '1111111111111111',\r\n        cvv: 789,\r\n        expiry_date: '01/18',\r\n    },\r\n    // invalid card\r\n    {\r\n        card_number: '4111111111111234',\r\n        cvv: 123,\r\n        expiry_date: '01/20',\r\n    },\r\n];\r\n\r\n//API para fazer a requisição passando as informações de pagamento.\r\nconst api = `https://run.mocky.io/v3/533cd5d7-63d3-4488-bf8d-4bb8c751c989`;\r\n\r\n//Criando classe do componente Modal.\r\nclass Modal extends Component<props>{\r\n\r\n    //Definindo state com card_index -1, pois será usado em um objeto Array onde o número 0, por padrão, pode criar conflitos\r\n    state = {\r\n        card_index: -1,\r\n    }\r\n\r\n    //Função para formatar o input do usuário para moeda, mesma função utilizada no projeto solo de HTML, CSS e JavaScript.\r\n    formatCurrency(e: any) {\r\n        const letterPattern = /[^0-9]/;\r\n        if (letterPattern.test(e.key)) {\r\n            //console.log(e.key)\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        if (!e.currentTarget.value) return;\r\n\r\n        let valor = e.currentTarget.value.toString();\r\n        valor = valor.replace(/[\\D]+/g, '');\r\n        valor = valor.replace(/([0-9]{1})$/g, \",$1\");\r\n\r\n        if (valor.length >= 6) {\r\n            while (/([0-9]{4})[,|.]/g.test(valor)) {\r\n                valor = valor.replace(/([0-9]{1})$/g, \",$1\");\r\n                valor = valor.replace(/([0-9]{3})[,|.]/g, \".$1\");\r\n            }\r\n        }\r\n\r\n        e.currentTarget.value = valor;\r\n    }\r\n\r\n    //Função para requisitar a API passando as informações de pagamento do Usuário.\r\n    payUser(id: number, valueToPay: number, card_index: number) {\r\n        //console.log(id, valueToPay, cards[card_index]);\r\n\r\n        //Pegando o titulo do Modal e definindo como um elemento paragrafo de HTML (condutas do typescript)\r\n        let headerTitle = document.getElementById(\"headerTitle\") as HTMLParagraphElement\r\n\r\n        //Criando um objeto com base na interface de Payload\r\n        let payload: TransactionPayload = {\r\n            card_number: cards[card_index].card_number,\r\n            cvv: cards[card_index].cvv,\r\n            expiry_date: cards[card_index].expiry_date,\r\n            destination_user_id: id,\r\n            value: valueToPay\r\n        }\r\n\r\n        //Criando requisição para a API e passando o objeto definido anteriormente como corpo da requisição.\r\n        fetch(api, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(payload),\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((data) => {\r\n            //O titulo do modal é definido aqui para evitar que o titulo do Modal mude antes do retorno da requisição.\r\n            headerTitle.textContent = \"Recibo de pagamento\";\r\n            //Verificando de o pagamento foi efetuado com sucesso.\r\n            if (data.success) {\r\n                //Definindo texto se ocorreu tudo certo.\r\n                document.getElementsByClassName(\"modalBody\")[0].innerHTML = '<p class=\"paymentStatus\">O pagamento foi concluido com sucesso.</p>';\r\n            } else {\r\n                //Definindo texto de algo deu errado\r\n                document.getElementsByClassName(\"modalBody\")[0].innerHTML = '<p class=\"paymentStatus\">O pagamento <strong>não</strong> foi concluido com sucesso.</p>';\r\n            }\r\n        }).catch((err) => {\r\n            //Definindo texto e titulo do modal se houver algum erro.\r\n            headerTitle.textContent = \"Recibo de pagamento\";\r\n            document.getElementsByClassName(\"modalBody\")[0].innerHTML = '<p class=\"paymentStatus\">O pagamento <strong>não</strong> foi concluido com sucesso.</p>';\r\n        });\r\n    }\r\n\r\n    createModal() {\r\n        //Verificando se é para mostrar o Modal, por default é false;\r\n        if (!this.props.show) {\r\n            return null;\r\n        }\r\n\r\n        //console.log(this.state.card_index)\r\n\r\n        //Retornando Modal case o show seja definido para True;\r\n        return (\r\n            //Definindo div modal e função para fechar o modal quando clicar fora, ressaltas para a função no onclick que chama função definiado no componente Lista.tsx e altera o State do componente Lista.tsx\r\n            <div className=\"modal\" onClick={() => { this.props.onClose() }}>\r\n                {/* Criando header do Modal e definindo a função stopPropagation no click para evitar que os filhos herdem função de cliques do pai. */}\r\n                <div className=\"modalHeader\" onClick={e => e.stopPropagation()}>\r\n                    {/* Definindo titulo do Header utilizando os props passado pelo componente Lista.tsx*/}\r\n                    <p id=\"headerTitle\">Pagamento para <span className=\"username\">{this.props[\"data-name\"]}</span></p>\r\n                    {/* Criando botão para fechar o  modal, utilzando a função definida para mudar o state do component Lista.tsx*/}\r\n                    <button className=\"closeBtn\" onClick={() => { this.props.onClose() }}>Fechar</button>\r\n                </div>\r\n                {/* Criando corpo do Modal e definindo a função stopPropagation no click para evitar que os filhos herdem função de cliques do pai. */}\r\n                <div className=\"modalBody\" onClick={e => e.stopPropagation()}>\r\n                    {/* Criando input definindo placeholder e evento onKeyPress para formatar o input do usuário conforme ele digita. */}\r\n                    <input placeholder=\"R$ 0,00\" type=\"text\" onKeyPress={(event) => { this.formatCurrency(event) }} />\r\n                    {/* Criando menu de seleção dos cartões. */}\r\n                    <select name=\"creditCards\" id=\"creditCards\">\r\n                        {\r\n                            //Utiliznado o objeto cards para definir as options do select.\r\n                            cards.map((card, index) => {\r\n                                return (\r\n                                    //Definindo um parametro \"data-key\" com o index do objeto e criando texto com os 4 números finais do cartão.\r\n                                    <option data-key={index} key={index} value={card.card_number}>{`Cartão com final ${card.card_number.slice(card.card_number.length - 4)}`}</option>\r\n                                )\r\n                            })\r\n                        }\r\n                    </select>\r\n                    <button onClick={() => {\r\n                        //Botão de pagar usuário\r\n                        //filtrando apenas os números do input.\r\n                        let valueToPay = document.getElementsByTagName('input')[0].value.replace(/[^0-9]/g, \"\");\r\n                        //console.log(Number(valueToPay.substring(0, valueToPay.length-2) + \".\" + valueToPay.substring(valueToPay.length-2)))\r\n                        let finalValue;\r\n                        //Verificando se existe mais que 1 digito no número, para evitar que pague centavos em vez de unidades de reais.\r\n                        if (valueToPay.length > 1) {\r\n                            //se for maior que um, adicione \".\" antes dos dois ultimos números para definir os centavos\r\n                            finalValue = Number(valueToPay.substring(0, valueToPay.length - 2) + \".\" + valueToPay.substring(valueToPay.length - 2));\r\n                        } else {\r\n                            //Se não, pague apenas as unidades de reais;\r\n                            finalValue = Number(valueToPay);\r\n                        }\r\n                        //Pegando o elemento select como um HTMLSelectElement (conduta do typescript)\r\n                        let selectElement = document.getElementById(\"creditCards\") as HTMLSelectElement;\r\n                        //Pegando qual elemento que está selecionado no menu select e então pegando seu atributo \"data-key\" que contém o index do cartão selecionado na opção.\r\n                        let card_index = Number(selectElement.options[selectElement.selectedIndex].getAttribute(\"data-key\"));\r\n                        if (finalValue) {\r\n                            //Se houver algum número no input, chama a função de pagamento.\r\n                            this.payUser(this.props.user_id, finalValue, card_index)\r\n                        } else {\r\n                            //Se não, foca no campo do input.\r\n                            document.getElementsByTagName('input')[0].focus();\r\n                        }\r\n                    }}>Pagar</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.createModal()\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import { Component } from 'react';\r\nimport '../css/lista.css';\r\nimport Modal from './Modal';\r\n\r\n//Link da API para fazer o GET dos usuários\r\nconst api = `https://www.mocky.io/v2/5d531c4f2e0000620081ddce`;\r\n\r\n//Modelo de interface que a API vai retornar.\r\ninterface User {\r\n    id: string;\r\n    name: string;\r\n    img: string;\r\n    username: string;\r\n}\r\n\r\n//Componente lista para gerar a lista com os usuários\r\nclass Lista extends Component<User>{\r\n\r\n     //state para fazer a funcionalidade do modal e da lista.\r\n    state = {\r\n        //item para armazenar os usuários que serão retornados da API para então usar funcionalidade de array.\r\n        users: [],\r\n        //item para definir se o modal está visivel ou não\r\n        show: false,\r\n        //item para definir o nome do usuário que será pago.\r\n        modalUsername: \"\",\r\n\r\n        user_id: 0,\r\n    }\r\n\r\n    //Requisitar API quando a página terminar de carregar.\r\n    componentDidMount = async () => {\r\n        //armazenado a resposta da requisição na API.\r\n        const response = await fetch(api);\r\n        //definido a interface que deve conter nos dados retornado pela API.\r\n        const obj: User = await response.json();\r\n        //Definindo o item \"users\" do state para o objeto retornado pela API;\r\n        this.setState({ users: obj });\r\n    }\r\n\r\n    //Função para criar a Lista\r\n    createLi() {\r\n        //Criando um map no item users do State, passando a interface como modelo.\r\n        return this.state.users.map((user: User, index) => {\r\n            //console.log(user.name)\r\n            return (\r\n                //Criando li para cada usuário, contendo parametro \"key\", \"id\" e um parametro customizado \"data-name\"\r\n                <li className=\"user\" key={user.id} id={user.id} data-name={user.name}>\r\n                    {/* Imagem do usuário */}\r\n                    <img className=\"userAvatar\" src={user.img} alt=\"\" />\r\n                    {/* Informações do Usuário */}\r\n                    <div className=\"userInfo\">\r\n                        <div>\r\n                            <p className=\"username\">{user.name}</p>\r\n                            <p className=\"userID\">ID: {user.id} - Username: {user.username}</p>\r\n                        </div>\r\n                        {/* Botão de pagamento */}\r\n                        <div className=\"payButton\">\r\n                            <button onClick={() => {\r\n                                // Definindo visibilidade do modal e informações do usuário no objeto state.\r\n                                this.setState({ show: true, modalUsername: user.name, user_id: user.id })\r\n                            }}>Pagar</button>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* Chamando o Modal passando props para a estrutura dele. Ressalta para o props \"onClose\" que passa uma função para alterar o state DESTE componente em outro componente*/}\r\n                <Modal user_id={this.state.user_id} data-name={this.state.modalUsername} show={this.state.show} onClose={() => {this.setState({show: false})}}></Modal>\r\n                <ul>\r\n                    {/* Chamando função para criar as li. */}\r\n                    {this.createLi()}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Lista;","import ReactDOM from 'react-dom';\nimport Lista from './componentes/Lista';\nimport './css/index.css';\n\nReactDOM.render(\n    <Lista></Lista>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}